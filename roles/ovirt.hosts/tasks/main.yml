---
- name: Get hosts
  ovirt_host_info:
    auth: "{{ ovirt_auth }}"
    pattern: "{{ hosts | map(attribute='name') | map('regex_replace', '(.*)', 'name=\\1') | list | join(' or ') }} status=installfailed"
  register: host_info
  when: "hosts is defined"
  tags:
    - hosts
    - reinstall

- name: Reinstall hosts
  ovirt_host:
    auth: "{{ ovirt_auth }}"
    state: reinstalled
    name: "{{ item.name }}"
    public_key: "{{ item.password is undefined }}"
    password: "{{ item.password | default(omit) }}"
  with_items:
    - "{{ host_info.ovirt_hosts | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - hosts
    - reinstall

- name: Add hosts
  ovirt_host:
    auth: "{{ ovirt_auth }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    address: "{{ item.address | default(omit) }}"
    cluster: "{{ item.cluster }}"
    password: "{{ item.password | default(omit) }}"
    public_key: "{{ item.public_key | default(omit) }}"
    override_iptables: true
    timeout: "{{ item.timeout | default(ovirt_hosts_add_timeout) }}"
    poll_interval: "{{ item.poll_interval | default(20) }}"
    hosted_engine: "{{ item.hosted_engine | default(omit) }}"
  with_items:
    - "{{ hosts | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  register: add_hosts
  tags:
    - hosts

- name: Log result of adding hosts
  debug:
    var: add_hosts

- name: Set Power Management
  ovirt_host_pm:
    auth: "{{ ovirt_auth }}"
    address: "{{ item.power_management.address | default(omit) }}"
    state: "{{ item.power_management.state | default(omit) }}"
    username: "{{ item.power_management.username | default(omit) }}"
    password: "{{ item.power_management.password | default(omit) }}"
    type: "{{ item.power_management.type | default(omit) }}"
    options: "{{ item.power_management.options | default(omit) }}"
    port: "{{ item.power_management.port | default(omit) }}"
    name: "{{ item.name }}"
  when: item.power_management is defined and not (item.state is defined and item.state == 'absent')
  with_items:
    - "{{ hosts | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - hosts

# WA for Add LVM filters before the SDs are added because of the following bugs:
#  - https://bugzilla.redhat.com/show_bug.cgi?id=1810143
#  - https://bugzilla.redhat.com/show_bug.cgi?id=1808850
#
- name: Apply LVM filters
  block:
    - name: Enable vdsm-tool config-lvm-filter
      shell: "echo yes | vdsm-tool config-lvm-filter"
      register: enable_filter
      delegate_to: "{{ item.address }}"
      loop: "{{ hosts | default([]) }}"
      loop_control:
        label: "{{ item.address }}"
    - name: Print the enable_filter output
      debug:
        msg: "{{ enable_filter.stdout }}"
    - name: Check if the lvm fitler set as expected
      shell: "lvm dumpconfig devices/filter"
      register: filter_setting
      delegate_to: "{{ item.address }}"
      loop: "{{ hosts | default([]) }}"
      loop_control:
        label: "{{ item.address }}"
    - name: Print the lvm filter_setting output
      debug:
        msg: "{{ filter_setting.stdout }}"
    - name: Fail with error when lvm filter not enabled as expected
      fail:
        msg: "The lvm-filter not enabled as expected with the following output: {{ item.stdout }}"
      when: item.stdout is not
        search('Configuration completed successfully|LVM filter is already configured for Vdsm')
      loop: "{{ enable_filter.results }}"
  when: compatibility_version|default(ovirt_engine_version) >= 4.3
  tags:
    - hosts
# End of WA to Add LVM filters
